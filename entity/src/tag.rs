//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tag")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: Option<String>,
}

impl Into<ActiveModel> for InsertModel {
    fn into(self) -> ActiveModel {
        let uid;
        if let Some(id) = self.id {
            uid = Set(id)
        } else {
            uid = NotSet
        }
        ActiveModel {
            id: uid,
            name: Set(self.name),
        }
    }
}

#[derive(Serialize, Deserialize)]
pub struct InsertModel {
    pub id: Option<Uuid>,
    pub name: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blog_tag::Entity")]
    BlogTag,
}

impl Related<super::blog_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogTag.def()
    }
}

impl Related<super::blog::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_tag::Relation::Blog.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::blog_tag::Relation::Tag.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
