//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "category")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: Option<String>,
    pub category_id: Option<Uuid>,
}

#[derive(Debug, Deserialize, Serialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct TreeModel {
    #[serde(flatten)]
    pub category: Model,
    pub children: Vec<TreeModel>,
}
impl From<Model> for TreeModel {
    fn from(model: Model) -> Self {
        Self {
            category: model,
            children: vec![],
        }
    }
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct InsertModel {
    pub id: Option<Uuid>,
    pub name: Option<String>,
    pub category_id: Option<Uuid>,
}

impl Into<ActiveModel> for InsertModel {
    fn into(self) -> ActiveModel {
        let mut uid = NotSet;
        if let Some(id) = self.id {
            uid = Set(id);
        }
        ActiveModel {
            id: uid,
            name: Set(self.name),
            category_id: Set(self.category_id),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blog::Entity")]
    Blog,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::CategoryId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
}

impl Related<super::blog::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blog.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub struct SelfReferencingLink;

impl Linked for SelfReferencingLink {
    type FromEntity = Entity;

    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::SelfRef.def()]
    }
}
