//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use super::sea_orm_active_enums::StatusEnum;
use sea_orm::{entity::prelude::*, ActiveValue::NotSet, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "blog")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub title: String,
    pub content: String,
    pub user_id: Uuid,
    pub category_id: Uuid,
    pub create_time: DateTime,
    pub update_time: DateTime,
    pub cover_image: Option<String>,
    pub status: Option<StatusEnum>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct CombineBlog {
    #[serde(flatten)]
    pub blog: Model,
    pub category: Option<String>,
    pub tags: Vec<String>,
}
#[derive(Debug, Deserialize, Serialize)]
#[serde(rename_all = "camelCase")]
pub struct ReqModel {
    pub id: Option<String>,
    pub title: String,
    pub content: String,
    pub category_id: Uuid,
    pub cover_image: Option<String>,
    pub tags: Vec<Uuid>,
}

#[derive(Debug, Deserialize, Serialize)]
pub struct InsertModel {
    pub id: Option<String>,
    pub title: String,
    pub content: String,
    pub user_id: Uuid,
    pub category_id: Uuid,
    pub cover_image: Option<String>,
}

impl Into<ActiveModel> for InsertModel {
    fn into(self) -> ActiveModel {
        let mut uid = NotSet;
        if let Some(id) = self.id {
            uid = Set(Uuid::parse_str(&id).unwrap());
        }
        ActiveModel {
            id: uid,
            title: Set(self.title),
            content: Set(self.content),
            user_id: Set(self.user_id),
            category_id: Set(self.category_id),
            create_time: NotSet,
            update_time: NotSet,
            cover_image: Set(self.cover_image),
            status: NotSet,
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::blog_tag::Entity")]
    BlogTag,
    #[sea_orm(
        belongs_to = "super::category::Entity",
        from = "Column::CategoryId",
        to = "super::category::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Category,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::blog_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlogTag.def()
    }
}

impl Related<super::category::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Category.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::blog_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::blog_tag::Relation::Blog.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
